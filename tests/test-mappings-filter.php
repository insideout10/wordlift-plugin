<?php

use Wordlift\Mappings\Mappings_DBO;
use Wordlift\Mappings\Mappings_Transform_Function;
use Wordlift\Mappings\Mappings_Validator;
use Wordlift\Mappings\Validators\Rule_Groups_Validator;
use Wordlift\Mappings\Validators\Rule_Validators_Registry;
use Wordlift\Mappings\Validators\Taxonomy_Rule_Validator;

if ( ! class_exists( 'Test_Transform_function' ) ) {
	class Test_Transform_function implements Mappings_Transform_Function {
		public function __construct() {
			add_filter( 'wl_mappings_transformation_functions',
				array( $this, 'wl_mappings_transformation_functions' ) );
		}

		public function wl_mappings_transformation_functions( $value ) {

			$value[] = $this;

			return $value;
		}

		public function get_name() {
			return 'test_transform_function';
		}

		public function get_label() {
			return 'Test_Transform_Function';
		}

		public function transform_data( $data, $jsonld, &$references, $post_id ) {
			return 'foo';
		}
	}
}


/**
 * Tests: Mappings filter test.
 *
 * Tests the mappings filters
 *
 * @since 3.26.0
 * @package Wordlift
 * @subpackage Wordlift/tests
 * @group mappings
 */
class Mappings_Filter_Test extends Wordlift_Unit_Test_Case {
	/**
	 * @var Mappings_DBO
	 */
	private $dbo;
	/**
	 * @var Wordlift_Jsonld_Service
	 */
	private $jsonld_service;
	/**
	 * @var Mappings_Validator
	 */
	private $validator;

	function setUp() {
		parent::setUp(); // TODO: Change the autogenerated stub
		// Initialize dependencies for the test.
		$this->dbo                = new Mappings_DBO();
		$default_rule_validator   = new Taxonomy_Rule_Validator();
		$rule_validators_registry = new Rule_Validators_Registry( $default_rule_validator );
		$rule_groups_validator    = new Rule_Groups_Validator( $rule_validators_registry );
		$this->validator          = new Mappings_Validator( $this->dbo, $rule_groups_validator );
		$this->jsonld_service     = Wordlift_Jsonld_Service::get_instance();
	}


	public function test_when_added_filters_should_correctly_produce_jsonld_output() {
		$post_id = $this->factory()->post->create( array() );
		wp_add_object_terms( $post_id, 'how-to', 'category' );
		// create filters
		$manual_properties = array(
			array(
				'property_name'      => '@type',
				'field_type'         => 'text',
				'field_name'         => 'HowTo',
				'transform_function' => 'none',
			),
		);
		add_filter( 'wl_mappings_post', function ( $mappings, $post_id ) use ( $manual_properties ) {
			array_push( $mappings, array(
				'properties' => $manual_properties
			) );

			return $mappings;
		}, 10, 2 );
		// Get the json ld data for this post.
		$jsonlds       = $this->jsonld_service->get_jsonld( false, $post_id );
		$target_jsonld = end( $jsonlds );
		$this->assertArrayHasKey( '@type', $target_jsonld );
		$this->assertEquals( 'HowTo', $target_jsonld['@type'] );
	}


	public function test_registering_mapping_with_transformation_function_should_work() {
		$post_id = $this->factory()->post->create( array() );
		wp_add_object_terms( $post_id, 'how-to', 'category' );
		// create filters
		$transformation_function = new Test_Transform_function();
		$manual_properties       = array(
			array(
				'property_name'      => '@type',
				'field_type'         => 'text',
				'field_name'         => 'HowTo',
				'transform_function' => $transformation_function->get_name(),
			),
		);
		add_filter( 'wl_mappings_post', function ( $mappings, $post_id ) use ( $manual_properties ) {
			array_push( $mappings, array(
				'properties' => $manual_properties
			) );

			return $mappings;
		}, 10, 2 );

		// Get the json ld data for this post.
		$jsonlds       = $this->jsonld_service->get_jsonld( false, $post_id );
		$target_jsonld = end( $jsonlds );
		$this->assertEquals( "foo", $target_jsonld['@type'] );
	}

	/**
	 * This test ensures if the developer didnt supply the data in the correct
	 * format, it make sure it didnt affect the other mappings and handles error correctly.
	 */
	public function test_improper_data_provided_by_developer_on_filter_should_not_break_mappings() {
		$post_id = $this->factory()->post->create( array() );
		wp_add_object_terms( $post_id, 'how-to', 'category' );
		/**
		 * NOTE: All the data supplied in this test are invalid, we should not
		 * have this mapping applied.
		 */
		// create filters
		$transformation_function = new Test_Transform_function();
		$manual_properties       = array(
			array(
				'property_foo_name'      => '@type',
				'field_foo_type'         => 'text',
				'field_foo_name'         => 'HowTo',
				'transform_foo_function' => $transformation_function->get_name(),
				'property_foo_status'    => Mappings_Validator::ACTIVE_CATEGORY,
			),
		);
		add_filter( 'wl_mappings_post', function ( $mappings, $post_id ) use ( $manual_properties ) {
			array_push( $mappings, array(
				'properties' => $manual_properties
			) );

			return $mappings;
		}, 10, 2 );

		// Get the json ld data for this post.
		$jsonlds       = $this->jsonld_service->get_jsonld( false, $post_id );
		$target_jsonld = reset( $jsonlds );
		$this->assertNotEquals( "foo", $target_jsonld['@type'] );
	}

}
