# We need `sudo` because we're going to install Apache with PHP.
# See https://docs.travis-ci.com/user/ci-environment/#Virtualization-environments
sudo: required
dist: precise

# Set the language to PHP since we're going to setup a WordPress web site.
language: php
php:
 - '5.3'
 - '5.4'
 - '5.5'
 - '5.6'

# Test matrix:
#  - PHP unit tests: PHP 5.3, 5.4, 5.5, 5.6, 7.0, 7.1
#  - JavaScript unit tests
#  - JavaScript end-to-end tests
# @@todo: we're currently testing only the last version of WordPress, we should also test the previous ones and nightly.
matrix:
  include:
    # JavaScript end-to-end tests.
    - php: 5.6
      env: SCRIPT=test:e2e
    # Additional PHP Unit tests, PHP 7.0, WP 4.8 (WP 4.2 isn't compatible with PHP 7.x).
    - php: 7.0
      env: SCRIPT=test:php WP_VERSION=4.8
    # Additional PHP Unit tests, PHP 7.0, WP 4.8 (WP 4.2 isn't compatible with PHP 7.x).
    # Add test coverage with these tests.
    - php: 7.1
      env: SCRIPT=test:php-test-coverage WP_VERSION=4.8
    # WordPress nightly.
    - php: 5.6
      env: SCRIPT=test:php WP_VERSION=nightly
    # JavaScript unit tests.
    - php: 5.6
      env: SCRIPT=test:js
    # Additional PHP Unit tests multisite enviroment, PHP 5.6, WP 4.8.
    - php: 5.6
      env: SCRIPT=test:multisite WP_VERSION=4.8
  allow_failures:
    # JavaScript end-to-end tests.
    - php: 5.6
      env: SCRIPT=test:e2e
    # WordPress nightly.
    - php: 5.6
      env: SCRIPT=test:php WP_VERSION=nightly

# Cache the node_modules folder.
# See https://blog.travis-ci.com/2013-12-05-speed-up-your-builds-cache-your-dependencies
cache:
  directories:
    # We cache vendor since it only contains the PHPUnit related files.
    - vendor
    - node_modules
    - $HOME/.npm
    - $HOME/.composer/cache

addons:
  # see https://docs.travis-ci.com/user/hosts
  # see https://support.saucelabs.com/customer/en/portal/articles/2639448-issues-with-localhost-proxying-on-edge-and-safari-8-and-9-using-sauce-connect-proxy
  hosts:
    - wordpress.local
  addons:
    # Required for compatibility with some nodejs dependencies.
    apt:
      sources:
      - ubuntu-toolchain-r-test
      packages:
      - gcc-4.8

env:
  global:
    # WordLift's Key and something else.
    - secure: "NB4P/P1/Gzje1/mOseVZqkIdaxI5vEgnlUUEmNRBtAT0CMt3c3pLSfzRtKrFfuJzoXpahxf8pC1R+Ljjf+QCC+2ECqjGCPSSv1tIj0L/H+c9UtbpPQIwD6kv7dPBYedZ6eNAgGjK1DXhrAuSnNaYJrZ35N6tv06B0KmniY6pJnk="
    - secure: "Fo6kJNe7LNHPfj6fBIyqOI7Zkm2DZwV7IH8jTGvZF5UkPvJiUyjN13z1TRXOohUYvigITZduF0f2I3MaxkAEpb/d5e2yf/Zu7x/nlRQzcSWM9zPMuW+oJG/b+s2m9F65uYkOIi1J5vI7w/G888zGS9LzSgwh4mXxeG1bm3b4EGw="

    # WordLift's Key.
    # Disabled, since we're using a key from up above: - secure: "exGT91J35T9zhTHMTmAkdAeMkUm+Xju8yrx3hyxHuAXt6rpwOGFPoeabRLlyj70+DmSMUK3b63yvwofqNtCoBgeNpRmXh9YIGmIZKYQdexD1vtYe6D1fvKM+7/08Z5dlIvQcSJX2gsDzZNQMVcRd0k9OrwrRN5TDZLjIWxBR70M="

    # WordLift's options, needed for testing.
    - WL_DISABLE_SPARQL_UPDATE_QUERIES_BUFFERING=true
    - WL_SSL_VERIFY_ENABLED=true
    - WL_SSL_V1_FORCED=true

    # SauceLabs environment vars.
    - secure: "BPMK2gsJp6pL9rQ+qJUJaCiILGI5DTn91bcEeOOguiPtg2EUMpZWG3fvyIoFJzGu8Mi7jluP60au00cmYK8QbtwJyDACqsmDRwV+1JFrl1ipZJ2R/KVksFfzsb8qOnNG9ejCSkobHj3IrR5l+bCJU2PPa9/d/lc3DFhZaNW4T3k="
    - secure: "MWJrwnQ09c+ekylfFMuky4W3V5rokJBGMXTZp5/PsDgY2eL684/77vIjUQ6tBNVrKIMhh5VbAoJ3FIY3PkbCVoz0JN3hRJ4JZNtqn1X/ABC7i0csC09ObLZO55/F2kHawPofvysdg/h9xfvd7vUQsoqd4FQcyxEzbUGmv2XenTE="

    # See https://docs.codeclimate.com/v1.0/docs/travis-ci-test-coverage
    - GIT_COMMITTED_AT=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then git log -1 --pretty=format:%ct; else git log -1 --skip 1 --pretty=format:%ct; fi)

    # CodeClimate Test Coverage Key.
    - secure: "AMguCWzHPqXvrb0oja6uYxg4vKw3uA+YEe2hBpI+cuvvkwLSISC3cf64rQv9yf3aVstnOnaZhUQ4JxCC1beYBsLRiZwPU/4QMsPYNO4HPl02YoOIXk+ZJzATSC0a3rs06gxcL9i2+Csd0zgkAL1a9tYj9r1yYP96qo+RpEYfIyw="
  matrix:
    - SCRIPT=test:php WP_VERSION=4.8
    - SCRIPT=test:php WP_VERSION=4.2

services:
  # Require MySQL.
  - mysql

# Legacy (required by test:js and test:php).
before_install:
  - .ci/travis/install_ssh_key.sh
  # If we're running the PHP tests, we need a WP test site.
  - |
    if [[ "$SCRIPT" == "test:php" || "$SCRIPT" == "test:php-test-coverage" || "$SCRIPT" == "test:multisite" ]]; then
      bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
      composer install --dev
      phpunit --version
      ./vendor/bin/phpunit --version
    fi
  # If we're running the JS test we need a browser.
  - |
    if [[ "$SCRIPT" == "test:js" ]]; then
      export CHROME_BIN=chromium-browser
      export DISPLAY=:99.0
      sh -e /etc/init.d/xvfb start
    fi
  # If we're making e2e tests, we need the SauceConnect tunnel, Apache and WordPress.
  - |
    if [[ "$SCRIPT" == "test:e2e" ]]; then
      .ci/travis/sauce_connect_start.sh
      mysql -e 'create database wordpress default charset utf8mb4 default collate utf8mb4_general_ci;'
      .ci/travis/install_wp_cli.sh
      .ci/travis/install_wordpress.sh
      .ci/travis/install_apache.sh
    fi

before_script:
  # Install an updated version of NodeJS. Note that this cannot be put in a sh file as nvm must retain its choice.
  - . $HOME/.nvm/nvm.sh
  - nvm install 6 --reinstall-packages-from=node
  - nvm use 6
  - node --version
  # Legacy (required by test:js and test:php).
  - npm install -g grunt-cli
  # Install Node dependencies.
  - npm install

# Finally launch the script.
script: npm run $SCRIPT

after_script:
  # Stop SauceConnect.
  - |
    if [[ "$SCRIPT" == "test:e2e" ]]; then
      .ci/travis/sauce_connect_stop.sh
    fi

after_success:
  # Code Climate test coverage.
  - |
    if [[ "$SCRIPT" == "test:php-test-coverage" ]]; then
      ./vendor/bin/test-reporter
    fi

# Notify our Slack channel.
notifications:
  slack: insideout10:NcslbQWVmD4YPInDq8TpBIno
